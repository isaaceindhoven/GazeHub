#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

TMP_STAGING=".tmp_staging"

# There is no 'readlink -f' on mac so we use python instead
DIR=$(python -c "import os; print os.path.realpath('$0');");
DIR=$(dirname "$DIR")
source "$DIR"/../shared.sh

# use docksal if it is up and running
if docksal::is_running; then
  if ! docksal::custom_command_exists "phpcs"; then
    git_hooks::warning "Missing phpcs docksal custom command"
    exit 1
  fi

  PHPCS_CMD=(fin phpcs)
else
  # simple check if code sniffer is set up correctly
  if [ ! -x "vendor/bin/phpcs" ]; then
      git_hooks::warning "PHP CodeSniffer bin not found or executable -> vendor/bin/phpcs"
      exit 1
  fi

  PHPCS_CMD=(vendor/bin/phpcs)
fi

# stolen from template file
if git rev-parse --verify HEAD >> /dev/null 2>&1
then
    AGAINST=HEAD
else
    # Initial commit: diff against an empty tree object
    AGAINST=$(git hash-object -t tree /dev/null)
fi

# this is the magic:
# retrieve all files in staging area that are added, modified or renamed
# but no deletions etc
FILES=$(git diff-index --name-only --cached --diff-filter=ACMR "$AGAINST" -- )
if [ "$FILES" == "" ]; then
    exit 0
fi

# create temporary copy of staging area
if [ -e $TMP_STAGING ]; then
    rm -rf $TMP_STAGING
fi
mkdir $TMP_STAGING

declare -a FILES_TO_CHECK
for FILE in $FILES
do
    if [[ $FILE =~ \.(php|phtml)$ ]]; then
        FILES_TO_CHECK+=("$FILE")
    fi
done

if [ ${#FILES_TO_CHECK[@]} -eq 0 ]; then
    exit 0
fi

for FILE in "${FILES_TO_CHECK[@]}"
do
    ID=$(git diff-index --cached "${AGAINST}" "${FILE}" | cut -d " " -f4)

    # create staged version of file in temporary staging area with the same
    # path as the original file so that the phpcs ignore filters can be applied
    mkdir -p "${TMP_STAGING}/$(dirname "${FILE}")"
    git cat-file blob "${ID}" > "${TMP_STAGING}/${FILE}"
done

set +e
OUTPUT=$("${PHPCS_CMD[@]}" --no-colors -s ${TMP_STAGING})
RETVAL=$?
set -e

# delete temporary copy of staging area
rm -rf $TMP_STAGING

if [ $RETVAL -ne 0 ]; then
    echo "--------------------------------------------------"
    echo "        PHP CodeSniffer Error(s) detected!"
    echo "--------------------------------------------------"
    echo ""
    echo "${OUTPUT}"
fi

exit $RETVAL
